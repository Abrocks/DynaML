{"name":"Bayeslearn","tagline":"Scala Library/REPL for working with Bayesian graphical models.","body":"# Bayes Learn      \r\n\r\n[![Build Status](https://travis-ci.org/mandar2812/bayeslearn.svg?branch=master)](https://travis-ci.org/mandar2812/bayeslearn)\r\n\r\nScala Library/REPL for working with Bayesian graphical models.\r\n\r\nIntroduction\r\n============\r\n\r\nBayes learn is a scala library/repl for implementing and working with Probabilistic Graphical Models. The aim is to build a robust set of abstract classes and interfaces, so general graph based ML algorithms can be realized using the API.\r\n\r\nA good introduction to Probabilistic Graphical Models can be found [here](http://web4.cs.ucl.ac.uk/staff/D.Barber/textbook/131214.pdf) in [David Barber's](http://web4.cs.ucl.ac.uk/staff/D.Barber/pmwiki/pmwiki.php?n=Brml.HomePage) text book. The Gaussian model implemented so far corresponds to the one discussed in Chapter 18 of the book.\r\n\r\nInstallation\r\n============\r\nPrerequisites: Maven to build the executables.\r\n\r\n* Clone this repository\r\n* Run the following.\r\n```shell\r\n  mvn clean compile\r\n  mvn package\r\n```\r\n\r\n* Make sure you give execution permission to `bayeslearn-repl` in the `target/bin` directory.\r\n```shell\r\n  chmod +x target/bin/bayesLearn-repl\r\n  target/bin/bayesLearn-repl\r\n```\r\n  You should get the following prompt.\r\n  \r\n```\r\n      ___           ___           ___           ___           ___              \r\n     /\\  \\         /\\  \\         |\\__\\         /\\  \\         /\\  \\             \r\n    /::\\  \\       /::\\  \\        |:|  |       /::\\  \\       /::\\  \\            \r\n   /:/\\:\\  \\     /:/\\:\\  \\       |:|  |      /:/\\:\\  \\     /:/\\ \\  \\           \r\n  /::\\~\\:\\__\\   /::\\~\\:\\  \\      |:|__|__   /::\\~\\:\\  \\   _\\:\\~\\ \\  \\          \r\n /:/\\:\\ \\:|__| /:/\\:\\ \\:\\__\\     /::::\\__\\ /:/\\:\\ \\:\\__\\ /\\ \\:\\ \\ \\__\\         \r\n \\:\\~\\:\\/:/  / \\/__\\:\\/:/  /    /:/~~/~    \\:\\~\\:\\ \\/__/ \\:\\ \\:\\ \\/__/         \r\n  \\:\\ \\::/  /       \\::/  /    /:/  /       \\:\\ \\:\\__\\    \\:\\ \\:\\__\\           \r\n   \\:\\/:/  /        /:/  /     \\/__/         \\:\\ \\/__/     \\:\\/:/  /           \r\n    \\::/__/        /:/  /                     \\:\\__\\        \\::/  /            \r\n     ~~            \\/__/                       \\/__/         \\/__/             \r\n      ___       ___           ___           ___           ___                  \r\n     /\\__\\     /\\  \\         /\\  \\         /\\  \\         /\\__\\                 \r\n    /:/  /    /::\\  \\       /::\\  \\       /::\\  \\       /::|  |                \r\n   /:/  /    /:/\\:\\  \\     /:/\\:\\  \\     /:/\\:\\  \\     /:|:|  |                \r\n  /:/  /    /::\\~\\:\\  \\   /::\\~\\:\\  \\   /::\\~\\:\\  \\   /:/|:|  |__              \r\n /:/__/    /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:\\__\\ /:/ |:| /\\__\\             \r\n \\:\\  \\    \\:\\~\\:\\ \\/__/ \\/__\\:\\/:/  / \\/_|::\\/:/  / \\/__|:|/:/  /             \r\n  \\:\\  \\    \\:\\ \\:\\__\\        \\::/  /     |:|::/  /      |:/:/  /              \r\n   \\:\\  \\    \\:\\ \\/__/        /:/  /      |:|\\/__/       |::/  /               \r\n    \\:\\__\\    \\:\\__\\         /:/  /       |:|  |         /:/  /                \r\n     \\/__/     \\/__/         \\/__/         \\|__|         \\/__/                 \r\n\r\nWelcome to Bayes Learn v 1.0\r\nInteractive Scala shell\r\nSTADIUS ESAT KU Leuven (2015)\r\n\r\nbayeslearn>\r\n```\r\n\r\nGetting Started\r\n===============\r\n\r\nThe `data/` directory contains a few sample data sets, we will be using them in the following example.\r\n\r\n* First we create a linear Gaussian Bayesian model using a csv data set. We will assume that the last column in each line of the file is the target variable, and we build a Bayesian regression model with additive Gaussian noise.\r\n\r\n```scala\r\n  val model = GaussianLinearModel(utils.getCSVReader(\"data/ionosphere.csv\", ','), false, \"classification\")\r\n```\r\n\r\n* We can now (optionally) add a Kernel on the model to create a generalized linear Bayesian model.\r\n\r\n```scala\r\n  val rbf = new RBFKernel(1.025)\r\n  model.applyKernel(rbf)\r\n```\r\n\r\n```\r\n15/04/08 16:18:27 INFO GaussianLinearModel: Calculating sample variance of the data set\r\nApr 08, 2015 4:18:27 PM com.github.fommil.netlib.BLAS <clinit>\r\nWARNING: Failed to load implementation from: com.github.fommil.netlib.NativeSystemBLAS\r\nApr 08, 2015 4:18:27 PM com.github.fommil.netlib.BLAS <clinit>\r\nWARNING: Failed to load implementation from: com.github.fommil.netlib.NativeRefBLAS\r\n15/04/08 16:18:27 INFO GaussianLinearModel: Using Silvermans rule of thumb to set bandwidth of density kernel\r\n15/04/08 16:18:27 INFO GaussianLinearModel: Std Deviation of the data: DenseVector(0.6618767091095631, 0.2153531017806649, 0.6301271799415376, 0.24541745830740389, 0.5431775259758828, 0.2946765619840614, 0.5211964641055545, 0.2761229821927304, 0.5577752837852287, 0.2845775306619974, 0.5479218770489251, 0.2645605240090495, 0.5548377593832784, 0.22456828710772916, 0.5447957151077759, 0.2610149610216883, 0.5376472009654502, 0.28306794461665225, 0.49930806466116906, 0.2771708644986171, 0.5102925100414256, 0.2926837740168661, 0.5044149749875603, 0.28672626576428256, 0.5628969922087946, 0.3188982068909329, 0.49719313771932133, 0.2858619900718872, 0.45806936986691993, 0.29055696674876463, 0.39475699812037596, 0.23682328160611926)\r\n15/04/08 16:18:27 INFO GaussianLinearModel: norm: 2.4059713445651982\r\n15/04/08 16:18:27 INFO GaussianLinearModel: Building low rank appriximation to kernel matrix\r\n15/04/08 16:18:27 INFO GreedyEntropySelector$: Initializing the working set, by drawing randomly from the training set\r\n15/04/08 16:18:27 INFO GreedyEntropySelector$: Starting iterative, entropy based greedy subset selection\r\n15/04/08 16:18:27 INFO GreedyEntropySelector$: Returning final prototype set\r\n15/04/08 16:18:27 INFO SVMKernel$: Constructing key-value representation of kernel matrix.\r\n15/04/08 16:18:27 INFO SVMKernel$: Dimension: 17 x 17\r\n15/04/08 16:18:27 INFO SVMKernelMatrix: Eigenvalue decomposition of the kernel matrix using JBlas.\r\nApr 08, 2015 4:18:27 PM com.github.fommil.netlib.LAPACK <clinit>\r\nWARNING: Failed to load implementation from: com.github.fommil.netlib.NativeSystemLAPACK\r\nApr 08, 2015 4:18:27 PM com.github.fommil.netlib.LAPACK <clinit>\r\nWARNING: Failed to load implementation from: com.github.fommil.netlib.NativeRefLAPACK\r\n15/04/08 16:18:27 INFO SVMKernelMatrix: Eigenvalue stats: 0.020963349640349942 =< lambda =< 4.948104887300834\r\n15/04/08 16:18:27 INFO GaussianLinearModel: Applying Feature map to data set\r\n15/04/08 16:18:28 INFO GaussianLinearModel: DONE: Applying Feature map to data set\r\n```\r\n\r\n* Now we can use Gradient Descent to learn the parameters w of the Bayesian model, with priors corresponding to zero mean and variance depending on the regularization parameter.\r\n\r\n```scala\r\n  model.setRegParam(0.001).setMaxIteartions(100).setLearningRate(0.001).setBatchFraction(1.0).learn\r\n```\r\n\r\n* We can now predict the value of the targer variable given a new point consisting of a Vector of features using `model.predict()`.\r\n\r\n* Evaluating models is easy in BayesLearn. You can create an evaluation object as follows. \r\n\r\n```scala\r\n  val met = model.evaluate(utils.getCSVReader(\"data/ionosphereTest.csv\", ','), false)\r\n  met.print\r\n```\r\n\r\n* The object `met` has a `print()` method which will dump some performance metrics in the shell. But you can also generate plots by using the `generatePlots()` method.\r\n```\r\n15/04/08 16:19:37 INFO BinaryClassificationMetrics: Classification Model Performance\r\n15/04/08 16:19:37 INFO BinaryClassificationMetrics: ============================\r\n15/04/08 16:19:37 INFO BinaryClassificationMetrics: Area under PR: 0.3313609467455621\r\n15/04/08 16:19:37 INFO BinaryClassificationMetrics: Area under ROC: 0.33136094674556216\r\n```\r\n\r\n```scala\r\nmet.generatePlots\r\n```\r\n\r\n![Image of Plots](http://drive.google.com/uc?export=view&id=0BwmVAhMMfhhgSXV2WDNLRl9OSkE)\r\n\r\n* Kernel based models are highly sensitive to the hyperparameters so use `model.tuneRBFKernel` to find the best value of the kernel parameters. BayesLearn will carry out a grid search over various values of the hyperparameter and use 10-fold cross-validation to find an error estimates for each value of the hyperparameter chosen. \r\n\r\nDocumentation\r\n=============\r\nYou can refer to the project [home page](http://mandar2812.github.io/bayeslearn/) or the [documentation](http://mandar2812.github.io/bayeslearn/target/site/scaladocs/index.html#package) for getting started with Bayes Learn. Bear in mind that this is still at its infacy and there will be many more improvements/tweaks in the future.\r\n","google":"UA-59996358-1","note":"Don't delete this file! It's used internally to help with page regeneration."}