{"name":"Bayeslearn","tagline":"Scala Library/REPL for working with Bayesian graphical models.","body":"# Bayes Learn\r\nScala Library/REPL for working with Bayesian graphical models.\r\n\r\nIntroduction\r\n============\r\n\r\nBayes learn is a scala library/repl for implementing and working with Probabilistic Graphical Models. The aim is to build a robust set of abstract classes and interfaces, so general graph based ML algorithms can be realized using the API.\r\n\r\nA good introduction to Probabilistic Graphical Models can be found [here](http://web4.cs.ucl.ac.uk/staff/D.Barber/textbook/131214.pdf) in [David Barber's](http://web4.cs.ucl.ac.uk/staff/D.Barber/pmwiki/pmwiki.php?n=Brml.HomePage) text book. The Gaussian model implemented so far corresponds to the one discussed in Chapter 18 of the book.\r\n\r\nInstallation\r\n============\r\nPrerequisites: Maven to build the executables.\r\n\r\n* Clone this repository\r\n* Run the following.\r\n```shell\r\n  mvn clean compile\r\n  mvn package\r\n```\r\n\r\n* Make sure you give execution permission to `bayeslearn-repl` in the `target/bin` directory.\r\n```shell\r\n  chmod +x target/bin/bayesLearn-repl\r\n  target/bin/bayesLearn-repl\r\n```\r\n  You should get the following prompt.\r\n  \r\n```\r\n       ___           ___           ___           ___           ___              \r\n     /\\  \\         /\\  \\         |\\__\\         /\\  \\         /\\  \\             \r\n    /::\\  \\       /::\\  \\        |:|  |       /::\\  \\       /::\\  \\            \r\n   /:/\\:\\  \\     /:/\\:\\  \\       |:|  |      /:/\\:\\  \\     /:/\\ \\  \\           \r\n  /::\\~\\:\\__\\   /::\\~\\:\\  \\      |:|__|__   /::\\~\\:\\  \\   _\\:\\~\\ \\  \\          \r\n /:/\\:\\ \\:|__| /:/\\:\\ \\:\\__\\     /::::\\__\\ /:/\\:\\ \\:\\__\\ /\\ \\:\\ \\ \\__\\         \r\n \\:\\~\\:\\/:/  / \\/__\\:\\/:/  /    /:/~~/~    \\:\\~\\:\\ \\/__/ \\:\\ \\:\\ \\/__/         \r\n  \\:\\ \\::/  /       \\::/  /    /:/  /       \\:\\ \\:\\__\\    \\:\\ \\:\\__\\           \r\n   \\:\\/:/  /        /:/  /     \\/__/         \\:\\ \\/__/     \\:\\/:/  /           \r\n    \\::/__/        /:/  /                     \\:\\__\\        \\::/  /            \r\n     ~~            \\/__/                       \\/__/         \\/__/             \r\n      ___       ___           ___           ___           ___                  \r\n     /\\__\\     /\\  \\         /\\  \\         /\\  \\         /\\__\\                 \r\n    /:/  /    /::\\  \\       /::\\  \\       /::\\  \\       /::|  |                \r\n   /:/  /    /:/\\:\\  \\     /:/\\:\\  \\     /:/\\:\\  \\     /:|:|  |                \r\n  /:/  /    /::\\~\\:\\  \\   /::\\~\\:\\  \\   /::\\~\\:\\  \\   /:/|:|  |__              \r\n /:/__/    /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:\\__\\ /:/\\:\\ \\:\\__\\ /:/ |:| /\\__\\             \r\n \\:\\  \\    \\:\\~\\:\\ \\/__/ \\/__\\:\\/:/  / \\/_|::\\/:/  / \\/__|:|/:/  /             \r\n  \\:\\  \\    \\:\\ \\:\\__\\        \\::/  /     |:|::/  /      |:/:/  /              \r\n   \\:\\  \\    \\:\\ \\/__/        /:/  /      |:|\\/__/       |::/  /               \r\n    \\:\\__\\    \\:\\__\\         /:/  /       |:|  |         /:/  /                \r\n     \\/__/     \\/__/         \\/__/         \\|__|         \\/__/                 \r\n\r\nWelcome to Bayes Learn v 0.11\r\nInteractive Scala shell\r\nSTADIUS ESAT KU Leuven (2015)\r\n\r\nbayeslearn>\r\n  \r\n```\r\n\r\nGetting Started\r\n===============\r\n\r\nThe `data/` directory contains a few sample data sets, we will be using them in the following example.\r\n\r\n* First we create a linear Gaussian Bayesian model using a csv data set. We will assume that the last column in each line of the file is the target variable, and we build a Bayesian regression model with additive Gaussian noise.\r\n\r\n```scala\r\n  val model = GaussianLinearModel(utils.getCSVReader(\"data/challenge.txt\", '\\t'), true, \"regression\")\r\n```\r\n\r\n* We can now (optionally) add a Kernel on the model to create a generalized linear Bayesian model. Although the kernel feature extraction is experimental as of now.\r\n\r\n```scala\r\n  val rbf = new RBFKernel(0.005)\r\n  model.applyKernel(rbf)\r\n```\r\n\r\n* Now we can use Gradient Descent to learn the parameters w of the Bayesian model, with priors corresponding to zero mean and variance depending on the regularization parameter.\r\n\r\n```scala\r\n  model.setMaxIterations(200).setLearningRate(0.001).learn\r\n```\r\n\r\n* We can now predict the value of the targer variable given a new point consisting of a Vector of features\r\n\r\n```scala\r\n  val pred = model.predict(DenseVector(0.68220219, 0.657091331))\r\n```\r\n\r\nDocumentation\r\n=============\r\nYou can refer to the project [home page](http://mandar2812.github.io/bayeslearn/) or the [documentation](http://mandar2812.github.io/bayeslearn/target/site/scaladocs/index.html#package) for getting started with Bayes Learn. Bear in mind that this is still at its infacy and there will be many more improvements/tweaks in the future.\r\n","google":"UA-59996358-1","note":"Don't delete this file! It's used internally to help with page regeneration."}