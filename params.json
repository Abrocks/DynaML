{"name":"Bayeslearn","tagline":"Scala Library/REPL for working with Bayesian graphical models.","body":"# Bayes Learn\r\nScala Library/REPL for working with Bayesian graphical models.\r\n\r\nIntroduction\r\n============\r\n\r\nBayes learn is a scala library/repl for implementing and working with Probabilistic Graphical Models. The aim is to build a robust set of abstract classes and interfaces, so general graph based ML algorithms can be realized using the API.\r\n\r\nInstallation\r\n============\r\nPrerequisites: Maven to build the executables.\r\n\r\n1. Clone this repository\r\n2. Run the following.\r\n```shell\r\n  mvn clean compile\r\n  mvn package\r\n```\r\n\r\n3. Make sure you give execution permission to `bayeslearn-repl` in the `target/bin` directory.\r\n```shell\r\n  chmod +x target/bin/bayesLearn-repl\r\n  target/bin/bayesLearn-repl\r\n```\r\n  You should get the following prompt.\r\n  \r\n```\r\n  Welcome to Bayes Learn \r\n\r\n\r\n\r\n         \\,,,/\r\n         (o o)\r\n-----oOOo-(_)-oOOo-----\r\nscala> \r\n  \r\n```\r\n\r\nGetting Started\r\n===============\r\n\r\nThe `data/` directory contains a few sample data sets, we will be using them in the following example.\r\n\r\n1. First we create a linear Gaussian Bayesian model using a csv data set. We will assume that the last column in each line of the file is the target variable, and we build a Bayesian regression model with additive Gaussian noise.\r\n\r\n```scala\r\n  val model = GaussianLinearModel(utils.getCSVReader(\"data/challenge.txt\", '\\t'))\r\n```\r\n\r\n2. We can now (optionally) add a Kernel on the model to create a generalized linear Bayesian model. Although the kernel feature extraction is experimental as of now.\r\n\r\n```scala\r\n  val rbf = new RBFKernel(0.005)\r\n  model.applyKernel(rbf)\r\n```\r\n\r\n3. Now we can use Gradient Descent to learn the parameters w of the Bayesian model, with priors corresponding to zero mean and variance depending on the regularization parameter.\r\n\r\n```scala\r\n  model.setMaxIterations(200).setLearningRate(0.001).learn\r\n```\r\n\r\n4. We can now predict the value of the targer variable given a new point consisting of a Vector of features\r\n\r\n```scala\r\n  val pred = model.predict(DenseVector(0.68220219, 0.657091331))\r\n```\r\n\r\nDocumentation\r\n=============\r\nYou can refer to the project [documentation](http://mandar2812.github.io/bayeslearn/target/site/scaladocs/index.html#package) for getting started with Bayes Learn. Bear in mind that this is still at its infacy and there will be many more improvements/tweaks in the future.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}