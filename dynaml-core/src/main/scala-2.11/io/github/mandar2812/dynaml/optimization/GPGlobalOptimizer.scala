package io.github.mandar2812.dynaml.optimization

import breeze.linalg.DenseVector
import io.github.mandar2812.dynaml.models.GPRegressionPipe
import io.github.mandar2812.dynaml.models.gp.GPRegression

/**
  * @author mandar2812 date: 27/10/2016.
  *
  * A global optimization algorithm which uses a Gaussian Process model
  * to construct an approximation to the optimization surface.
  */
abstract class GPGlobalOptimizer[T <: GloballyOptimizable]
  extends GlobalOptimizer[T] {

  /**
    * A DynaML data pipe which takes the energy landscape generated by
    * a naive grid search and trains a GP
    */
  val gpPipe: GPRegressionPipe[GPRegression, Stream[(Double, Map[String, Double])]]
  
}

object GPGlobalOptimizer {

  def convertConfigToVec(config: Map[String, Double]): DenseVector[Double] =
    DenseVector(config.toArray.sortBy(_._1).map(_._2))
}